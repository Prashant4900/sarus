// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-dart"
  // output   = "../lib/gen/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses Address[]
  carts     Cart[]
  orders    Order[]
  reviews   Review[]
  wishlists Wishlist[]

  @@map("users")
}

model Address {
  id           Int      @id @default(autoincrement())
  userId       Int
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders   Order[]  @relation("ShippingAddress")
  billingOrders    Order[]  @relation("BillingAddress")

  @@map("addresses")
}

model Category {
  id                Int       @id @default(autoincrement())
  name              String
  description       String?
  parentCategoryId  Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  parentCategory    Category?  @relation("CategorySubcategories", fields: [parentCategoryId], references: [id], onDelete: SetNull)
  subcategories     Category[] @relation("CategorySubcategories")
  products          ProductCategory[]

  @@map("categories")
}

model Product {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  price         Decimal
  stockQuantity Int       @default(0)
  sku           String?   @unique
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  categories    ProductCategory[]
  images        ProductImage[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  discounts     ProductDiscount[]

  @@map("products")
  @@index([name])
}

model ProductCategory {
  productId   Int
  categoryId  Int

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("product_categories")
}

model ProductImage {
  id           Int      @id @default(autoincrement())
  productId    Int
  imageUrl     String
  isPrimary    Boolean  @default(false)
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())

  // Relations
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id              Int      @id @default(autoincrement())
  cartId          Int
  productId       Int
  quantity        Int      @default(1)
  priceAtAddition Decimal
  addedAt         DateTime @default(now())

  // Relations
  cart            Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cart_items")
  @@index([productId])
}

model Order {
  id                Int      @id @default(autoincrement())
  userId            Int
  shippingAddressId Int
  billingAddressId  Int
  subtotal          Decimal
  tax               Decimal
  shippingCost      Decimal
  totalAmount       Decimal
  status            String   @default("pending")
  paymentStatus     String   @default("pending")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User       @relation(fields: [userId], references: [id])
  shippingAddress   Address    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items             OrderItem[]
  payments          Payment[]

  @@map("orders")
  @@index([userId])
  @@index([status])
}

model OrderItem {
  id              Int      @id @default(autoincrement())
  orderId         Int
  productId       Int
  quantity        Int
  priceAtPurchase Decimal
  subtotal        Decimal
  createdAt       DateTime @default(now())

  // Relations
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
  @@index([productId])
}

model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int
  paymentMethod String
  transactionId String?
  amount        Decimal
  status        String
  paymentDate   DateTime @default(now())

  // Relations
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
  @@index([productId])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String   @default("My Wishlist")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]

  @@map("wishlists")
}

model WishlistItem {
  wishlistId Int
  productId  Int
  addedAt    DateTime @default(now())

  // Relations
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([wishlistId, productId])
  @@map("wishlist_items")
}

model Discount {
  id           Int       @id @default(autoincrement())
  code         String?   @unique
  description  String?
  amount       Decimal
  discountType String    // 'percentage' or 'fixed_amount'
  usageLimit   Int?
  timesUsed    Int       @default(0)
  validFrom    DateTime
  validTo      DateTime
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  products     ProductDiscount[]

  @@map("discounts")
  @@index([code])
  @@index([validFrom, validTo, isActive])
}

model ProductDiscount {
  productId   Int
  discountId  Int

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  discount    Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)

  @@id([productId, discountId])
  @@map("product_discounts")
}